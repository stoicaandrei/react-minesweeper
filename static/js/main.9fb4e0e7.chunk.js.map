{"version":3,"sources":["state/modules/board/utils.ts","state/modules/board/actions.ts","state/modules/root/index.ts","state/history.ts","views/Game/Board.tsx","views/Game/index.tsx","App.tsx","serviceWorker.ts","state/store.ts","index.tsx","services/index.ts","state/index.ts","settings/index.ts","services/State/constants.ts","state/modules/root/public.ts","state/modules/board/selectors.ts","services/useInterval.ts","services/State/index.ts","services/State/ApiCaller.ts","services/State/StateManager.ts","services/State/createSocketMiddleware.ts"],"names":["getNeighbors","cell","cells","x","y","neighbors","i","j","nx","ny","push","stateManager","createModule","initialState","initBoard","createLocalEvent","state","cols","rows","bombs","is_revealed","is_bomb","is_flagged","value","options","pickRandomAndRemove","arr","index","Math","floor","random","length","res","splice","forEach","triggerReveal","revealCell","row","revealAll","map","StateManager","history","createBrowserHistory","location","query","qs","parse","search","substr","listen","go","goBack","replace","Board","dispatch","useDispatch","board","useSelector","boardSelectors","key","type","undefined","style","width","height","onClick","Game","useEffect","App","defer","htmlAttributes","lang","encodeSpecialCharacters","defaultTitle","titleTemplate","titleAttributes","itemprop","defaultProps","Boolean","window","hostname","match","sagaMiddleware","createSagaMiddleware","enhancers","compose","applyMiddleware","createSocketMiddleware","devToolsEnhancer","store","createStore","reducer","run","saga","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","API_URL","SOCKET_URL","PING_INTERVAL","PONG_TIMEOUT","PING","PONG","SOCKET_OPENED","SOCKET_CLOSED","SOCKET_STATES","0","1","2","3","SOCKET_COMMAND","SOCKET_RECEIVE","SOCKET_RECONNECTED","SOCKET_RECONNECT","SOCKET_CONNECT","SOCKET_CONNECTED","SOCKET_DISCONNECT","apiCaller","a","path","method","data","token","session_id","endpoint","queryString","stringify","url","endsWith","split","filter","s","param","slice","headers","Headers","append","fetch","body","JSON","response","json","status","result","sockets","timeouts","pingInterval","logging","handleMessage","handleOpen","handleClose","handleReconnect","socketEvents","sagaEffects","_ping","socketDesc","socket","send","setTimeout","close","_onPong","clearTimeout","_listen","onopen","event","setInterval","_log","onclose","clearInterval","log","wasClean","uri","connectToSocket","onmessage","getState","socketObj","readyState","WebSocket","disconnectFromSocket","onOpen","func","onReconnect","onMessage","onClose","this","name","single","item","items","waiting","reducerWithInitialState","events","module","actionName","reducerFn","action","actionCreatorFactory","case","payload","produce","draft","api","asyncAction","async","takeEvery","started","select","auth","session","id","call","toString","put","failed","params","done","startReducer","failReducer","successReducer","onReceive","reducers","Object","entries","val","combineReducers","self","effect","f","next","meta","hasOwnProperty","warn"],"mappings":"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","file":"static/js/main.9fb4e0e7.chunk.js","sourcesContent":["import { Cell, Board } from 'state';\n\nexport function getNeighbors(cell: Cell, cells: Cell[][]) {\n  const { x, y } = cell;\n\n  const neighbors: Cell[] = [];\n\n  for (let i = -1; i <= 1; i++) {\n    for (let j = -1; j <= 1; j++) {\n      const nx = x + i;\n      const ny = y + j;\n      if (!cells[nx] || !cells[nx][ny]) continue;\n\n      neighbors.push(cells[nx][ny]);\n    }\n  }\n\n  return neighbors;\n}\n\nexport function revealAll(state: Board) {\n  state.cells.forEach(row => {\n    row.forEach(cell => {\n      cell.is_revealed = true;\n    });\n  });\n}\n\nexport function revealCell(cell: Cell, state: Board) {\n  if (cell.is_revealed || cell.is_flagged) return;\n\n  cell.is_revealed = true;\n  if (cell.is_bomb) revealAll(state);\n  if (!cell.value)\n    getNeighbors(cell, state.cells).map(cell => revealCell(cell, state));\n}\n","import { stateManager } from '../root';\n\nimport { Board, Cell } from './types';\nimport { getNeighbors, revealCell } from './utils';\n\ntype State = Board;\nconst moduleName = 'board';\n\nstateManager.createModule(moduleName, { initialState: { cells: [] } });\n\nexport const initBoard = stateManager.createLocalEvent<\n  { cols: number; rows: number; bombs: number },\n  State\n>(moduleName, 'INIT_BOARD', (state, { cols, rows, bombs }) => {\n  for (let i = 0; i < cols; i++) {\n    state.cells.push([]);\n    for (let j = 0; j < rows; j++) {\n      state.cells[i].push({\n        is_revealed: false,\n        is_bomb: false,\n        is_flagged: false,\n        value: 0,\n\n        x: i,\n        y: j,\n      });\n    }\n  }\n\n  const options = [];\n  for (let i = 0; i < cols; i++) {\n    for (let j = 0; j < rows; j++) {\n      options.push([i, j]);\n    }\n  }\n\n  function pickRandomAndRemove(arr: any[]) {\n    const index = Math.floor(Math.random() * arr.length);\n    const res = arr[index];\n    arr.splice(index, 1);\n    return res;\n  }\n\n  for (let i = 0; i < bombs; i++) {\n    if (!options.length) return;\n\n    const [x, y] = pickRandomAndRemove(options);\n\n    state.cells[x][y].is_bomb = true;\n\n    getNeighbors(state.cells[x][y], state.cells).forEach(cell =>\n      !cell.is_bomb ? (cell.value += 1) : null\n    );\n  }\n});\n\nexport const triggerReveal = stateManager.createLocalEvent<\n  {\n    x: number;\n    y: number;\n  },\n  State\n>(moduleName, 'TRIGGER_REVEAL', (state, { x, y }) => {\n  if (!state.cells[x] || !state.cells[x][y]) return;\n\n  const cell = state.cells[x][y];\n\n  if (!cell.is_revealed) revealCell(cell, state);\n});\n","import { StateManager } from 'services';\n\nimport { Board } from 'state';\n\nexport const stateManager = new StateManager();\n\nexport type StoreState = {\n  board: Board;\n};\n","import { createBrowserHistory } from 'history';\nimport qs from 'qs';\n\nconst history = createBrowserHistory();\n\nhistory.location = {\n  ...history.location,\n  query: qs.parse(history.location.search.substr(1)),\n  state: {},\n};\n\nhistory.listen(() => {\n  history.location = {\n    ...history.location,\n    query: qs.parse(history.location.search.substr(1)),\n    state: history.location.state || {},\n  };\n});\n\nconst { go, goBack, push, replace } = history;\n\nexport { go, goBack, push, replace };\nexport default history;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Row, Col, Layout, Button } from 'antd';\n\nimport { boardSelectors, triggerReveal } from 'state';\n\nconst Board: React.FC = () => {\n  const dispatch = useDispatch();\n  const board = useSelector(boardSelectors.board);\n\n  return (\n    <Layout>\n      {board.cells.map((row, i) => (\n        <Row key={i}>\n          {row.map((cell, j) => (\n            <Col key={j}>\n              <Button\n                type={cell.is_revealed ? 'primary' : undefined}\n                style={{ width: 30, height: 30 }}\n                onClick={() => dispatch(triggerReveal({ x: i, y: j }))}\n              >\n                {cell.value}\n              </Button>\n            </Col>\n          ))}\n        </Row>\n      ))}\n    </Layout>\n  );\n};\n\nexport default Board;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport Board from './Board';\n\nimport { initBoard } from 'state';\n\nconst Game: React.FC = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(initBoard({ rows: 3, cols: 3, bombs: 1 }));\n  }, [dispatch]);\n\n  return (\n    <div>\n      <Board />\n    </div>\n  );\n};\n\nexport default Game;\n","import React from 'react';\nimport { Router, Switch, Route, Redirect } from 'react-router-dom';\n\nimport { Helmet } from 'react-helmet-async';\n\nimport history from './state/history';\n\nimport { Game } from './views';\n\nconst App: React.FC = () => {\n  return (\n    <Router history={history}>\n      <Helmet\n        defer={false}\n        htmlAttributes={{ lang: 'en' }}\n        encodeSpecialCharacters={true}\n        defaultTitle={'Minesweeper'}\n        titleTemplate={`%s | PM`}\n        titleAttributes={{ itemprop: 'name', lang: 'en' }}\n      />\n      <Game />\n    </Router>\n  );\n};\n\nApp.defaultProps = {};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL || '',\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, compose, applyMiddleware, StoreEnhancer } from 'redux';\nimport { devToolsEnhancer } from 'redux-devtools-extension/logOnlyInProduction';\nimport createSagaMiddleware from 'redux-saga';\n\nimport { stateManager, StoreState } from './modules/root/';\n\nimport { createSocketMiddleware } from 'services';\n\n/**\n * Create the redux-saga middleware.\n */\nconst sagaMiddleware = createSagaMiddleware();\n\n/**\n * Enhancers for the store.\n */\nconst enhancers = compose(\n  /* Add the redux-saga middleware */\n  applyMiddleware(createSocketMiddleware(stateManager)),\n  applyMiddleware(sagaMiddleware),\n  /* Include the devtools. Comment this out if you don't want to use the dev tools. */\n  devToolsEnhancer({})\n) as StoreEnhancer<StoreState>;\n\n/**\n * Create the store. We do not include an initial state, as each of the module / duck\n * reducers includes its own initial state.\n */\nconst store = createStore(stateManager.reducer, enhancers);\n\n/* Run the root saga */\nsagaMiddleware.run(stateManager.saga);\n\nexport function getStore() {\n  return store;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport { HelmetProvider } from 'react-helmet-async';\n\nimport 'antd/dist/antd.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { getStore } from './state/store';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <Provider store={getStore()}>\n    <HelmetProvider>\n      <App />\n    </HelmetProvider>\n  </Provider>,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export { default as useInterval } from './useInterval';\nexport * from './State';\n","export * from './modules/root/public';\n","let BASE_URL = '';\nlet API_URL = '';\nlet SOCKET_URL = '';\n\nif (process.env.NODE_ENV === 'development') {\n  BASE_URL = '';\n}\n\nAPI_URL = `http://${BASE_URL}/api`;\nSOCKET_URL = `ws://${BASE_URL}/api`;\n\nexport { BASE_URL, API_URL, SOCKET_URL };\n","export const PING_INTERVAL = 10000;\nexport const PONG_TIMEOUT = 5000;\nexport const PING = 'PING';\nexport const PONG = 'PONG';\n\n// SOCKET_STATES\nexport const SOCKET_CONNECTING = 'SOCKET_CONNECTING';\nexport const SOCKET_OPENED = 'SOCKET_OPENED';\nexport const SOCKET_CLOSING = 'SOCKET_CLOSING';\nexport const SOCKET_CLOSED = 'SOCKET_CLOSED';\n\nexport const SOCKET_STATES: { [key: string]: string } = {\n  0: SOCKET_CONNECTING,\n  1: SOCKET_OPENED,\n  2: SOCKET_CLOSING,\n  3: SOCKET_CLOSED,\n};\n\n// ACTIONS\nexport const SOCKET_COMMAND = 'SOCKET_COMMAND';\nexport const SOCKET_RECEIVE = 'SOCKET_RECEIVE';\nexport const SOCKET_RECONNECTED = 'SOCKET_RECONNECTED';\nexport const SOCKET_RECONNECT = 'SOCKET_RECONNECT';\n\nexport const SOCKET_CONNECT = 'SOCKET_CONNECT';\nexport const SOCKET_CONNECTED = 'SOCKET_CONNECTED';\nexport const SOCKET_DISCONNECT = 'SOCKET_DISCONNECT';\n","import * as boardSelectors from '../board/selectors';\nexport { boardSelectors };\n\nexport * from '../board/actions';\nexport * from '../board/types';\n","import { StoreState } from '../root';\n\nexport const board = (state: StoreState) => state.board;\n","import React, { useEffect, useRef } from 'react';\n\ntype IntervalFunction = () => unknown | void;\n\nexport default function useInterval(callback: IntervalFunction, ms: number) {\n  const savedCallback = useRef<IntervalFunction | null>(null);\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      if (savedCallback.current !== null) {\n        savedCallback.current();\n      }\n    }\n\n    const id = setInterval(tick, ms);\n    return () => clearInterval(id);\n  }, [ms]);\n}\n","export * from './ApiCaller';\nexport { default as StateManager } from './StateManager';\nexport * from './createSocketActions';\nexport { default as createSocketMiddleware } from './createSocketMiddleware';\nexport * from './types';\n","import queryString from 'query-string';\nimport { select } from 'redux-saga/effects';\n\nimport { API_URL } from 'settings';\n\ntype apiParams<Payload> = {\n  path: string;\n  endpoint: string;\n  method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';\n  data?: Payload;\n  token?: string;\n  session_id?: string;\n};\n\nexport async function apiCaller<Payload>({\n  path,\n  method = 'GET',\n  data,\n  token,\n  session_id,\n  endpoint,\n}: apiParams<Payload>): Promise<any> {\n  // session_id is required for the session specific requests\n  if (session_id) data = { ...data, session_id: session_id } as any;\n\n  const query = '?' + queryString.stringify((data as any) || {});\n\n  let url = `${API_URL}/${endpoint}${path}`;\n  if (!url.endsWith('/')) url += '/';\n\n  if (method === 'GET') url += query;\n\n  const urlParams = path.split('/').filter(s => s[0] === ':');\n\n  urlParams.forEach(param => {\n    const key = param.slice(1);\n    url = url.replace(param, (data as any)[key]);\n    (data as any)[key] = undefined;\n  });\n\n  const headers = new Headers();\n  headers.append('Content-Type', 'application/json');\n\n  if (token) {\n    headers.append('Authorization', `JWT ${token}`);\n  }\n\n  const response = await fetch(url, {\n    headers,\n    method,\n    body: method !== 'GET' ? JSON.stringify(data) : undefined,\n  });\n\n  try {\n    return { result: await response.json(), status: response.status };\n  } catch (e) {\n    return { result: e, status: response.status };\n  }\n}\n","import { call, ForkEffect, put, takeEvery, select } from 'redux-saga/effects';\nimport { combineReducers } from 'redux';\nimport {\n  Action,\n  ActionCreator,\n  Success,\n  actionCreatorFactory,\n} from 'typescript-fsa';\nimport {\n  ReducerBuilder,\n  reducerWithInitialState,\n} from 'typescript-fsa-reducers';\nimport { produce } from 'immer';\n\nimport { SOCKET_URL } from 'settings';\n\nimport { API, apiCaller, CreateModuleOptions } from 'services';\n\nimport {\n  PING_INTERVAL,\n  PONG_TIMEOUT,\n  PING,\n  PONG,\n  SOCKET_STATES,\n  SOCKET_OPENED,\n} from './constants';\n\nexport default class StateManager {\n  readonly sockets: {\n    [key: string]: {\n      socket: WebSocket;\n      uri: string;\n      token: string;\n    };\n  };\n  readonly timeouts: {\n    [key: string]: NodeJS.Timeout;\n  };\n  private pingInterval: NodeJS.Timeout | null;\n  readonly logging: boolean;\n\n  private handleMessage: (...args: unknown[]) => void;\n  private handleOpen: (...args: unknown[]) => void;\n  private handleClose: (...args: unknown[]) => void;\n  private handleReconnect: (...args: unknown[]) => void;\n\n  readonly socketEvents: {\n    // module\n    [key: string]: {\n      reducer: ReducerBuilder<any>;\n      events: {\n        [key: string]: ActionCreator<any>;\n      };\n    };\n  };\n  private sagaEffects: ForkEffect[] = [];\n\n  constructor() {\n    this.sockets = {};\n    this.timeouts = {};\n    this.pingInterval = null;\n    this.logging = true;\n\n    // Callbacks\n    this.handleMessage = a => console.log(a);\n    this.handleOpen = a => console.log(a);\n    this.handleClose = a => console.log(a);\n    this.handleReconnect = a => console.log(a);\n\n    this.socketEvents = {};\n  }\n\n  private _ping = (socketDesc: string) => {\n    this.sockets[socketDesc].socket.send(PING);\n\n    this.timeouts[socketDesc] = setTimeout(() => {\n      this.sockets[socketDesc].socket.close(4008, 'ping_timeout');\n    }, PONG_TIMEOUT);\n  };\n\n  private _onPong = (socketDesc: string) => {\n    clearTimeout(this.timeouts[socketDesc]);\n  };\n\n  private _listen = (socketDesc: string) => {\n    const { socket } = this.sockets[socketDesc];\n\n    socket.onopen = event => {\n      this.pingInterval = setInterval(\n        () => this._ping(socketDesc),\n        PING_INTERVAL\n      );\n      this._log(event, socketDesc);\n      this.handleOpen(socketDesc);\n    };\n\n    socket.onclose = event => {\n      clearInterval(this.pingInterval as NodeJS.Timeout);\n      console.log(this.sockets);\n      // attempt to reconnect if socket connection is dropped\n\n      if (!event.wasClean) {\n        const { token, uri } = this.sockets[socketDesc];\n        setTimeout(() => this.connectToSocket(socketDesc, token, uri), 10000);\n      }\n\n      this.handleClose(socketDesc, event.wasClean);\n      this._log(event, socketDesc);\n    };\n\n    socket.onmessage = event => {\n      const message = event.data;\n      if (message === PONG) this._onPong(socketDesc);\n      else {\n        this.handleMessage(socketDesc, JSON.parse(event.data));\n        this._log(event, socketDesc);\n      }\n    };\n  };\n\n  private _log = (event: any, socketDesc: string) => {\n    this.logging &&\n      console.log({\n        event,\n        state: this.getState(socketDesc),\n        socketObj: this.sockets,\n      });\n  };\n\n  public getState = (socketDesc: string) =>\n    SOCKET_STATES[this.sockets[socketDesc].socket.readyState];\n\n  public connectToSocket = (socketDesc: string, token: string, uri: string) => {\n    if (\n      this.sockets[socketDesc] &&\n      SOCKET_STATES[this.sockets[socketDesc].socket.readyState] ===\n        SOCKET_OPENED\n    )\n      return;\n\n    const socket = new WebSocket(`${SOCKET_URL}${uri}?token=${token}`);\n\n    this.sockets[socketDesc] = { token, uri, socket };\n    this._listen(socketDesc);\n  };\n\n  public disconnectFromSocket = (socketDesc: string) => {\n    console.log(this.sockets);\n    this.sockets[socketDesc].socket.close();\n  };\n\n  public onOpen = (func: any) => {\n    this.handleOpen = func;\n  };\n\n  public onReconnect = (func: any) => {\n    this.handleReconnect = func;\n  };\n\n  public onMessage = (func: any) => {\n    this.handleMessage = func;\n  };\n\n  public onClose = (func: any) => {\n    this.handleClose = func;\n  };\n\n  // this is used to define different reducers for different apis\n  public createModule(\n    name: string,\n    { initialState, single }: CreateModuleOptions = {}\n  ) {\n    if (!initialState) {\n      initialState = single ? { item: {} } : { items: [] };\n      initialState = { ...initialState, waiting: false };\n    }\n\n    this.socketEvents[name] = {\n      reducer: reducerWithInitialState(initialState),\n      events: {},\n    };\n  }\n\n  public createLocalEvent<Payload, ApiState>(\n    module: string,\n    actionName: string,\n    reducerFn: (state: ApiState, payload: Payload) => void\n  ) {\n    const action = actionCreatorFactory(module)<Payload>(actionName);\n\n    const { reducer } = this.socketEvents[module];\n\n    reducer.case(action, (state, payload) =>\n      produce(state, (draft: any) => {\n        reducerFn(draft, payload);\n      })\n    );\n\n    return action;\n  }\n\n  public createApi<Payload, Result, ApiState>(\n    module: string,\n    actionName: string,\n    api: API<Payload, Result, ApiState>\n  ): (payload: Payload) => Action<Payload> {\n    const asyncAction = actionCreatorFactory(module).async<\n      Payload,\n      Result,\n      Error\n    >(actionName);\n\n    this.sagaEffects.push(\n      // when this action is dispatched\n      takeEvery(asyncAction.started, function* (action: Action<Payload>) {\n        try {\n          // fetch auth\n          const token = yield select(state => state.auth.item.token);\n          const session_id = yield select(\n            state => state.session.item?.session?.id\n          );\n          // call api\n          const { result, status } = yield call(() =>\n            apiCaller<Payload>({\n              endpoint: module,\n              ...api,\n              data: action.payload,\n              token,\n              session_id,\n            })\n          );\n\n          if (status.toString()[0] !== '2') {\n            console.log(result);\n            return yield put(\n              asyncAction.failed({ params: action.payload, error: result })\n            );\n          }\n\n          yield put(asyncAction.done({ params: action.payload, result }));\n        } catch (error) {\n          console.log(error);\n          yield put(asyncAction.failed({ params: action.payload, error }));\n        }\n      })\n    );\n\n    const { reducer } = this.socketEvents[module];\n\n    reducer.case(asyncAction.started, (state, payload) =>\n      produce(state, (draft: any) => {\n        draft.waiting = true;\n        draft.error = undefined;\n        if (api.startReducer) api.startReducer(draft, payload);\n      })\n    );\n\n    reducer.case(asyncAction.failed, (state, { params, error }) =>\n      produce(state, (draft: any) => {\n        draft.waiting = false;\n        draft.error = error;\n        if (api.failReducer) api.failReducer(draft, error, params as Payload);\n      })\n    );\n\n    reducer.case(asyncAction.done, (state, { params, result }) =>\n      produce(state, (draft: any) => {\n        draft.waiting = false;\n        api.successReducer(draft, result as Result, params as Payload);\n      })\n    );\n\n    return (payload: Payload) => asyncAction.started(payload);\n  }\n\n  public createSocketListener<Payload, Result, ApiState>(\n    module: string,\n    event: string,\n    onReceive: (state: ApiState, result: Result) => void\n  ) {\n    const action = actionCreatorFactory(module)<Success<Payload, Result>>(\n      event\n    );\n    const { reducer } = this.socketEvents[module];\n\n    this.socketEvents[module].events[event] = action;\n\n    reducer.case(action, (state, payload: any) =>\n      produce(state, (draft: any) => {\n        onReceive(draft, payload as Result);\n      })\n    );\n  }\n\n  get events() {\n    return this.socketEvents;\n  }\n\n  get reducer() {\n    const reducers: {\n      [key: string]: ReducerBuilder<any>;\n    } = {};\n\n    Object.entries(this.socketEvents).forEach(([key, val]) => {\n      reducers[key] = val.reducer;\n    });\n\n    return combineReducers(reducers);\n  }\n\n  get saga() {\n    const self = this;\n    return function* () {\n      for (const effect of self.sagaEffects) {\n        yield effect;\n      }\n    };\n  }\n}\n","import {\n  SOCKET_CONNECT,\n  SOCKET_CONNECTED,\n  SOCKET_DISCONNECT,\n  SOCKET_COMMAND,\n  SOCKET_RECEIVE,\n  SOCKET_CLOSED,\n  SOCKET_RECONNECT,\n  SOCKET_RECONNECTED,\n} from './constants';\n\nimport { SocketAction, StateManager } from 'services';\n\nexport default function createSocketMiddleware(stateManager: StateManager) {\n  return (store: any) => (next: any) => (action: SocketAction) => {\n    let res;\n    let module, event;\n    if (!(action.meta === SOCKET_COMMAND)) {\n      return next(action);\n    } else {\n      res = next(action);\n      switch (action.type) {\n        case SOCKET_CONNECT:\n          stateManager.onOpen((socketDesc: string) => {\n            store.dispatch({\n              type: SOCKET_CONNECTED,\n              meta: SOCKET_COMMAND,\n              socketDesc: socketDesc,\n            });\n          });\n          stateManager.onClose((socketDesc: string, wasClean: boolean) => {\n            console.log('closing ', socketDesc, wasClean);\n            store.dispatch({\n              type: SOCKET_CLOSED,\n              meta: SOCKET_COMMAND,\n              socketDesc: socketDesc,\n              wasClean: wasClean,\n            });\n          });\n          stateManager.onMessage((socketDesc: string, message: string) => {\n            store.dispatch({\n              type: SOCKET_RECEIVE,\n              payload: message,\n              meta: SOCKET_COMMAND,\n              socketDesc: socketDesc,\n            });\n          });\n          stateManager.onReconnect((socketDesc: string) => {\n            store.dispatch({\n              type: SOCKET_RECONNECT,\n              meta: SOCKET_COMMAND,\n              socketDesc: socketDesc,\n            });\n          });\n          stateManager.connectToSocket(\n            action.socketDesc,\n            action.token,\n            action.uri\n          );\n          break;\n        case SOCKET_DISCONNECT:\n          console.log('disconecting ');\n          stateManager.disconnectFromSocket(action.socketDesc);\n          break;\n        case SOCKET_RECEIVE:\n          [module, event] = action.payload['type'].split('.');\n          if (\n            stateManager.events.hasOwnProperty(module) &&\n            stateManager.events[module].events.hasOwnProperty(event)\n          ) {\n            store.dispatch(\n              stateManager.events[module].events[event](action.payload['data'])\n            );\n          } else {\n            console.warn({ module, event }, 'does not exist');\n          }\n          break;\n        case SOCKET_RECONNECT:\n          store.dispatch({\n            type: SOCKET_RECONNECTED,\n            meta: SOCKET_COMMAND,\n            socketDesc: action.socketDesc,\n          });\n      }\n    }\n    return res;\n  };\n}\n"],"sourceRoot":""}