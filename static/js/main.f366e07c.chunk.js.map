{"version":3,"sources":["services/State/createSocketMiddleware.ts","state/index.ts","state/modules/board/utils.ts","state/modules/board/actions.ts","state/modules/root/index.ts","state/history.ts","views/Game/Cell.tsx","views/Game/Board.tsx","views/Game/constants.ts","views/Game/DifficultySelector.tsx","views/Game/index.tsx","App.tsx","serviceWorker.ts","state/store.ts","index.tsx","services/index.ts","services/State/constants.ts","settings/index.ts","state/modules/root/public.ts","state/modules/board/selectors.ts","services/useInterval.ts","services/State/index.ts","services/State/ApiCaller.ts","services/State/StateManager.ts"],"names":["createSocketMiddleware","stateManager","store","next","action","res","module","event","meta","SOCKET_COMMAND","type","SOCKET_CONNECT","onOpen","socketDesc","dispatch","SOCKET_CONNECTED","onClose","wasClean","console","log","SOCKET_CLOSED","onMessage","message","SOCKET_RECEIVE","payload","onReconnect","SOCKET_RECONNECT","connectToSocket","token","uri","SOCKET_DISCONNECT","disconnectFromSocket","split","events","hasOwnProperty","warn","SOCKET_RECONNECTED","getNeighbors","cell","cells","x","y","neighbors","i","j","nx","ny","push","revealCell","state","is_revealed","is_flagged","is_bomb","forEach","row","revealAll","value","map","generateBoard","rows","cols","bombs","status","startTime","Date","options","pickRandomAndRemove","arr","index","Math","floor","random","length","splice","createModule","initialState","initBoard","createLocalEvent","resetBoard","triggerReveal","reduce","p","c","countFlags","board","computeGameStatus","triggerFlag","StateManager","history","createBrowserHistory","location","query","qs","parse","search","substr","listen","go","goBack","replace","memo","disabled","useDispatch","undefined","danger","style","height","width","borderRadius","onMouseDown","e","preventDefault","button","onContextMenu","Board","useSelector","boardSelectors","gameStatus","bombsLeft","useState","elapsedTime","setElapsedTime","useEffect","setInterval","val","info","error","String","padStart","border","key","flexWrap","justify","DIFFICULTIES","Easy","Intermediate","Expert","DifficultySelector","difficulty","setDifficulty","Object","keys","diff","onClick","Game","Row","props","justifyStart","textAlign","paddingTop","children","window","innerWidth","App","defer","htmlAttributes","lang","encodeSpecialCharacters","defaultTitle","titleTemplate","titleAttributes","itemprop","defaultProps","Boolean","hostname","match","sagaMiddleware","createSagaMiddleware","enhancers","compose","applyMiddleware","devToolsEnhancer","createStore","reducer","run","saga","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","PING_INTERVAL","PONG_TIMEOUT","PING","PONG","SOCKET_OPENED","SOCKET_STATES","0","1","2","3","API_URL","SOCKET_URL","flat","apiCaller","a","path","method","data","session_id","endpoint","queryString","stringify","url","endsWith","filter","s","param","slice","headers","Headers","append","fetch","body","JSON","response","json","result","sockets","timeouts","pingInterval","logging","handleMessage","handleOpen","handleClose","handleReconnect","socketEvents","sagaEffects","_ping","socket","send","setTimeout","close","_onPong","clearTimeout","_listen","onopen","_log","onclose","clearInterval","onmessage","getState","socketObj","readyState","WebSocket","func","this","name","single","item","items","waiting","reducerWithInitialState","actionName","reducerFn","actionCreatorFactory","case","produce","draft","api","asyncAction","async","takeEvery","started","select","auth","session","id","call","toString","put","failed","params","done","startReducer","failReducer","successReducer","onReceive","reducers","entries","combineReducers","self","effect","f"],"mappings":"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","file":"static/js/main.f366e07c.chunk.js","sourcesContent":["import {\n  SOCKET_CONNECT,\n  SOCKET_CONNECTED,\n  SOCKET_DISCONNECT,\n  SOCKET_COMMAND,\n  SOCKET_RECEIVE,\n  SOCKET_CLOSED,\n  SOCKET_RECONNECT,\n  SOCKET_RECONNECTED,\n} from './constants';\n\nimport { SocketAction, StateManager } from 'services';\n\nexport default function createSocketMiddleware(stateManager: StateManager) {\n  return (store: any) => (next: any) => (action: SocketAction) => {\n    let res;\n    let module, event;\n    if (!(action.meta === SOCKET_COMMAND)) {\n      return next(action);\n    } else {\n      res = next(action);\n      switch (action.type) {\n        case SOCKET_CONNECT:\n          stateManager.onOpen((socketDesc: string) => {\n            store.dispatch({\n              type: SOCKET_CONNECTED,\n              meta: SOCKET_COMMAND,\n              socketDesc: socketDesc,\n            });\n          });\n          stateManager.onClose((socketDesc: string, wasClean: boolean) => {\n            console.log('closing ', socketDesc, wasClean);\n            store.dispatch({\n              type: SOCKET_CLOSED,\n              meta: SOCKET_COMMAND,\n              socketDesc: socketDesc,\n              wasClean: wasClean,\n            });\n          });\n          stateManager.onMessage((socketDesc: string, message: string) => {\n            store.dispatch({\n              type: SOCKET_RECEIVE,\n              payload: message,\n              meta: SOCKET_COMMAND,\n              socketDesc: socketDesc,\n            });\n          });\n          stateManager.onReconnect((socketDesc: string) => {\n            store.dispatch({\n              type: SOCKET_RECONNECT,\n              meta: SOCKET_COMMAND,\n              socketDesc: socketDesc,\n            });\n          });\n          stateManager.connectToSocket(\n            action.socketDesc,\n            action.token,\n            action.uri\n          );\n          break;\n        case SOCKET_DISCONNECT:\n          console.log('disconecting ');\n          stateManager.disconnectFromSocket(action.socketDesc);\n          break;\n        case SOCKET_RECEIVE:\n          [module, event] = action.payload['type'].split('.');\n          if (\n            stateManager.events.hasOwnProperty(module) &&\n            stateManager.events[module].events.hasOwnProperty(event)\n          ) {\n            store.dispatch(\n              stateManager.events[module].events[event](action.payload['data'])\n            );\n          } else {\n            console.warn({ module, event }, 'does not exist');\n          }\n          break;\n        case SOCKET_RECONNECT:\n          store.dispatch({\n            type: SOCKET_RECONNECTED,\n            meta: SOCKET_COMMAND,\n            socketDesc: action.socketDesc,\n          });\n      }\n    }\n    return res;\n  };\n}\n","export * from './modules/root/public';\n","import moment from 'moment';\n\nimport { Cell, Board } from 'state';\n\nexport function getNeighbors(cell: Cell, cells: Cell[][]) {\n  const { x, y } = cell;\n\n  const neighbors: Cell[] = [];\n\n  for (let i = -1; i <= 1; i++) {\n    for (let j = -1; j <= 1; j++) {\n      const nx = x + i;\n      const ny = y + j;\n      if (!cells[nx] || !cells[nx][ny]) continue;\n\n      neighbors.push(cells[nx][ny]);\n    }\n  }\n\n  return neighbors;\n}\n\nexport function revealAll(state: Board) {\n  state.cells.forEach(row => {\n    row.forEach(cell => {\n      cell.is_revealed = true;\n    });\n  });\n}\n\nexport function revealCell(cell: Cell, state: Board) {\n  if (cell.is_revealed || cell.is_flagged) return;\n\n  cell.is_revealed = true;\n  if (cell.is_bomb) revealAll(state);\n  if (!cell.value)\n    getNeighbors(cell, state.cells).map(cell => revealCell(cell, state));\n}\n\nexport function countFlags(cell: Cell, cells: Cell[][]) {\n  return getNeighbors(cell, cells).reduce(\n    (p, c) => (c.is_flagged ? p + 1 : p),\n    0\n  );\n}\n\nexport function computeGameStatus(board: Board) {\n  for (const row of board.cells) {\n    for (const cell of row) {\n      if (cell.is_revealed && cell.is_bomb) return (board.status = 'lost');\n      if (!cell.is_revealed && !cell.is_bomb) return (board.status = 'playing');\n    }\n  }\n\n  board.status = 'won';\n}\n\nexport function generateBoard(\n  rows: number,\n  cols: number,\n  bombs: number,\n  state: Board\n) {\n  state.status = 'playing';\n  state.cells = [];\n  for (let i = 0; i < rows; i++) {\n    state.cells.push([]);\n    state.startTime = new Date();\n    for (let j = 0; j < cols; j++) {\n      state.cells[i].push({\n        is_revealed: false,\n        is_bomb: false,\n        is_flagged: false,\n        value: 0,\n\n        x: i,\n        y: j,\n      });\n    }\n  }\n\n  const options = [];\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      options.push([i, j]);\n    }\n  }\n\n  function pickRandomAndRemove(arr: any[]) {\n    const index = Math.floor(Math.random() * arr.length);\n    const res = arr[index];\n    arr.splice(index, 1);\n    return res;\n  }\n\n  for (let i = 0; i < bombs; i++) {\n    if (!options.length) return;\n\n    const [x, y] = pickRandomAndRemove(options);\n\n    state.cells[x][y].is_bomb = true;\n\n    getNeighbors(state.cells[x][y], state.cells).forEach(cell =>\n      !cell.is_bomb ? (cell.value += 1) : null\n    );\n  }\n}\n","import { stateManager } from '../root';\n\nimport { Board, Cell } from './types';\nimport {\n  getNeighbors,\n  revealCell,\n  countFlags,\n  generateBoard,\n  computeGameStatus,\n} from './utils';\n\ntype State = Board;\nconst moduleName = 'board';\n\nstateManager.createModule(moduleName, { initialState: { cells: [] } });\n\nexport const initBoard = stateManager.createLocalEvent<\n  { cols: number; rows: number; bombs: number },\n  State\n>(moduleName, 'INIT_BOARD', (state, { cols, rows, bombs }) => {\n  state.rows = rows;\n  state.cols = cols;\n  state.bombs = bombs;\n  generateBoard(rows, cols, bombs, state);\n});\n\nexport const resetBoard = stateManager.createLocalEvent<unknown, State>(\n  moduleName,\n  'RESET_BOARD',\n  state => {\n    const { rows, cols, bombs } = state;\n    generateBoard(rows, cols, bombs, state);\n  }\n);\n\nexport const triggerReveal = stateManager.createLocalEvent<Cell, State>(\n  moduleName,\n  'TRIGGER_REVEAL',\n  (state, { x, y }) => {\n    const cell = state.cells[x][y];\n\n    if (!cell.is_revealed) revealCell(cell, state);\n    else if (countFlags(cell, state.cells) === cell.value)\n      getNeighbors(cell, state.cells).forEach(cell => revealCell(cell, state));\n\n    computeGameStatus(state);\n  }\n);\n\nexport const triggerFlag = stateManager.createLocalEvent<Cell, State>(\n  moduleName,\n  'TRIGGER_FLAG',\n  (state, { x, y }) => {\n    const cell = state.cells[x][y];\n\n    if (cell.is_revealed) return;\n\n    cell.is_flagged = !cell.is_flagged;\n  }\n);\n","import { StateManager } from 'services';\n\nimport { Board } from 'state';\n\nexport const stateManager = new StateManager();\n\nexport type StoreState = {\n  board: Board;\n};\n","import { createBrowserHistory } from 'history';\nimport qs from 'qs';\n\nconst history = createBrowserHistory();\n\nhistory.location = {\n  ...history.location,\n  query: qs.parse(history.location.search.substr(1)),\n  state: {},\n};\n\nhistory.listen(() => {\n  history.location = {\n    ...history.location,\n    query: qs.parse(history.location.search.substr(1)),\n    state: history.location.state || {},\n  };\n});\n\nconst { go, goBack, push, replace } = history;\n\nexport { go, goBack, push, replace };\nexport default history;\n","import React, { memo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Button } from 'antd';\n\nimport { triggerReveal, triggerFlag, Cell as CellType } from 'state';\n\ntype props = {\n  cell: CellType;\n  disabled: boolean;\n};\n\nconst Cell: React.FC<props> = ({ cell, disabled }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <Button\n      type={cell.is_revealed ? 'primary' : undefined}\n      danger={cell.is_revealed && cell.is_bomb}\n      style={{\n        height: 30,\n        width: 30,\n        borderRadius: 0,\n      }}\n      onMouseDown={e => {\n        e.preventDefault();\n        if (disabled) return;\n        if (e.button === 0) dispatch(triggerReveal(cell));\n      }}\n      onContextMenu={e => {\n        e.preventDefault();\n        if (disabled) return;\n        dispatch(triggerFlag(cell));\n      }}\n    >\n      {cell.is_revealed\n        ? cell.is_bomb\n          ? 'B'\n          : cell.value\n          ? cell.value\n          : ' '\n        : cell.is_flagged\n        ? 'F'\n        : ' '}\n    </Button>\n  );\n};\n\nexport default memo(Cell);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Row, Col, message } from 'antd';\n\nimport { boardSelectors, triggerReveal } from 'state';\n\nimport Cell from './Cell';\n\nconst Board: React.FC = () => {\n  const dispatch = useDispatch();\n  const board = useSelector(boardSelectors.board);\n  const gameStatus = useSelector(boardSelectors.gameStatus);\n  const bombsLeft = useSelector(boardSelectors.bombsLeft);\n  const startTime = useSelector(boardSelectors.startTime);\n\n  const [elapsedTime, setElapsedTime] = useState(0);\n\n  useEffect(() => {\n    setInterval(() => setElapsedTime(val => val + 1), 1000);\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (gameStatus === 'won') message.info('You won! :)');\n    if (gameStatus === 'lost') message.error('You lost! :(');\n  }, [gameStatus]);\n\n  useEffect(() => {\n    setElapsedTime(0);\n  }, [startTime]);\n\n  return (\n    <div>\n      <Row>Bombs left: {bombsLeft}</Row>\n      <Row>Time: {String(elapsedTime).padStart(3, '0')}</Row>\n      <div style={{ border: '2px solid black' }}>\n        {board.cells.map((row, i) => (\n          <Row key={i} style={{ flexWrap: 'nowrap' }} justify=\"start\">\n            {row.map((cell, j) => (\n              <Col key={j}>\n                <Cell cell={cell} disabled={gameStatus !== 'playing'} />\n              </Col>\n            ))}\n          </Row>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n","export const EASY = { rows: 10, cols: 10, bombs: 10 };\nexport const INTERMEDIATE = { rows: 16, cols: 16, bombs: 40 };\nexport const EXPERT = { rows: 16, cols: 30, bombs: 99 };\n\nexport type Difficulties = 'Easy' | 'Intermediate' | 'Expert';\nexport const DIFFICULTIES = {\n  Easy: EASY,\n  Intermediate: INTERMEDIATE,\n  Expert: EXPERT,\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Button, Row } from 'antd';\n\nimport { DIFFICULTIES, Difficulties, EASY } from './constants';\n\nimport { initBoard } from 'state';\n\nconst DifficultySelector: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const [difficulty, setDifficulty] = useState<Difficulties>('Easy');\n\n  useEffect(() => {\n    dispatch(initBoard(DIFFICULTIES.Easy));\n  }, [dispatch]);\n\n  return (\n    <div>\n      {Object.keys(DIFFICULTIES).map(diff => (\n        <Button\n          key={diff}\n          onClick={() => {\n            setDifficulty(diff as Difficulties);\n            dispatch(initBoard(DIFFICULTIES[diff as Difficulties]));\n          }}\n          type={diff === difficulty ? 'primary' : undefined}\n        >\n          {diff}\n        </Button>\n      ))}\n    </div>\n  );\n};\n\nexport default DifficultySelector;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Row as AntdRow, Button, Layout } from 'antd';\n\nimport Board from './Board';\nimport DifficultySelector from './DifficultySelector';\n\nimport { resetBoard } from 'state';\n\nconst Game: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const Row: React.FC<{\n    paddingTop: number;\n    justifyStart?: boolean;\n  }> = props => (\n    <AntdRow\n      justify={props.justifyStart ? 'start' : 'center'}\n      style={{\n        textAlign: 'center',\n        paddingTop: props.paddingTop,\n      }}\n    >\n      {props.children}\n    </AntdRow>\n  );\n\n  return (\n    <div>\n      <Row paddingTop={30}>\n        <h1>Minesweeper</h1>\n      </Row>\n      <Row paddingTop={10}>\n        <Button onClick={() => dispatch(resetBoard({}))}>Reset</Button>\n      </Row>\n      <Row paddingTop={0} justifyStart={window.innerWidth < 500}>\n        <Board />\n      </Row>\n      <Row paddingTop={10}>\n        <DifficultySelector />\n      </Row>\n    </div>\n  );\n};\n\nexport default Game;\n","import React from 'react';\nimport { Router, Switch, Route, Redirect } from 'react-router-dom';\n\nimport { Helmet } from 'react-helmet-async';\n\nimport history from './state/history';\n\nimport { Game } from './views';\n\nconst App: React.FC = () => {\n  return (\n    <Router history={history}>\n      <Helmet\n        defer={false}\n        htmlAttributes={{ lang: 'en' }}\n        encodeSpecialCharacters={true}\n        defaultTitle={'Minesweeper'}\n        titleTemplate={`%s | PM`}\n        titleAttributes={{ itemprop: 'name', lang: 'en' }}\n      >\n        <style>{'body { background-color: #f0f2f5; }'}</style>\n      </Helmet>\n      <Game />\n    </Router>\n  );\n};\n\nApp.defaultProps = {};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL || '',\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, compose, applyMiddleware, StoreEnhancer } from 'redux';\nimport { devToolsEnhancer } from 'redux-devtools-extension/logOnlyInProduction';\nimport createSagaMiddleware from 'redux-saga';\n\nimport { stateManager, StoreState } from './modules/root/';\n\nimport { createSocketMiddleware } from 'services';\n\n/**\n * Create the redux-saga middleware.\n */\nconst sagaMiddleware = createSagaMiddleware();\n\n/**\n * Enhancers for the store.\n */\nconst enhancers = compose(\n  /* Add the redux-saga middleware */\n  applyMiddleware(createSocketMiddleware(stateManager)),\n  applyMiddleware(sagaMiddleware),\n  /* Include the devtools. Comment this out if you don't want to use the dev tools. */\n  devToolsEnhancer({})\n) as StoreEnhancer<StoreState>;\n\n/**\n * Create the store. We do not include an initial state, as each of the module / duck\n * reducers includes its own initial state.\n */\nconst store = createStore(stateManager.reducer, enhancers);\n\n/* Run the root saga */\nsagaMiddleware.run(stateManager.saga);\n\nexport function getStore() {\n  return store;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport { HelmetProvider } from 'react-helmet-async';\n\nimport 'antd/dist/antd.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { getStore } from './state/store';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <Provider store={getStore()}>\n    <HelmetProvider>\n      <App />\n    </HelmetProvider>\n  </Provider>,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export { default as useInterval } from './useInterval';\nexport * from './State';\n","export const PING_INTERVAL = 10000;\nexport const PONG_TIMEOUT = 5000;\nexport const PING = 'PING';\nexport const PONG = 'PONG';\n\n// SOCKET_STATES\nexport const SOCKET_CONNECTING = 'SOCKET_CONNECTING';\nexport const SOCKET_OPENED = 'SOCKET_OPENED';\nexport const SOCKET_CLOSING = 'SOCKET_CLOSING';\nexport const SOCKET_CLOSED = 'SOCKET_CLOSED';\n\nexport const SOCKET_STATES: { [key: string]: string } = {\n  0: SOCKET_CONNECTING,\n  1: SOCKET_OPENED,\n  2: SOCKET_CLOSING,\n  3: SOCKET_CLOSED,\n};\n\n// ACTIONS\nexport const SOCKET_COMMAND = 'SOCKET_COMMAND';\nexport const SOCKET_RECEIVE = 'SOCKET_RECEIVE';\nexport const SOCKET_RECONNECTED = 'SOCKET_RECONNECTED';\nexport const SOCKET_RECONNECT = 'SOCKET_RECONNECT';\n\nexport const SOCKET_CONNECT = 'SOCKET_CONNECT';\nexport const SOCKET_CONNECTED = 'SOCKET_CONNECTED';\nexport const SOCKET_DISCONNECT = 'SOCKET_DISCONNECT';\n","let BASE_URL = '';\nlet API_URL = '';\nlet SOCKET_URL = '';\n\nif (process.env.NODE_ENV === 'development') {\n  BASE_URL = '';\n}\n\nAPI_URL = `http://${BASE_URL}/api`;\nSOCKET_URL = `ws://${BASE_URL}/api`;\n\nexport { BASE_URL, API_URL, SOCKET_URL };\n","import * as boardSelectors from '../board/selectors';\nexport { boardSelectors };\n\nexport * from '../board/actions';\nexport * from '../board/types';\n","import { StoreState } from '../root';\n\nexport const board = (state: StoreState) => state.board;\nexport const gameStatus = (state: StoreState) => state.board.status;\nexport const startTime = (state: StoreState) => state.board.startTime;\n\nexport const bombsLeft = (state: StoreState) => {\n  const cells = state.board.cells.flat(1);\n\n  const bombs = state.board.bombs;\n  const flags = cells.reduce((p, c) => (c.is_flagged ? p + 1 : p), 0);\n\n  return bombs - flags;\n};\n","import React, { useEffect, useRef } from 'react';\n\ntype IntervalFunction = () => unknown | void;\n\nexport default function useInterval(callback: IntervalFunction, ms: number) {\n  const savedCallback = useRef<IntervalFunction | null>(null);\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      if (savedCallback.current !== null) {\n        savedCallback.current();\n      }\n    }\n\n    const id = setInterval(tick, ms);\n    return () => clearInterval(id);\n  }, [ms]);\n}\n","export * from './ApiCaller';\nexport { default as StateManager } from './StateManager';\nexport * from './createSocketActions';\nexport { default as createSocketMiddleware } from './createSocketMiddleware';\nexport * from './types';\n","import queryString from 'query-string';\nimport { select } from 'redux-saga/effects';\n\nimport { API_URL } from 'settings';\n\ntype apiParams<Payload> = {\n  path: string;\n  endpoint: string;\n  method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';\n  data?: Payload;\n  token?: string;\n  session_id?: string;\n};\n\nexport async function apiCaller<Payload>({\n  path,\n  method = 'GET',\n  data,\n  token,\n  session_id,\n  endpoint,\n}: apiParams<Payload>): Promise<any> {\n  // session_id is required for the session specific requests\n  if (session_id) data = { ...data, session_id: session_id } as any;\n\n  const query = '?' + queryString.stringify((data as any) || {});\n\n  let url = `${API_URL}/${endpoint}${path}`;\n  if (!url.endsWith('/')) url += '/';\n\n  if (method === 'GET') url += query;\n\n  const urlParams = path.split('/').filter(s => s[0] === ':');\n\n  urlParams.forEach(param => {\n    const key = param.slice(1);\n    url = url.replace(param, (data as any)[key]);\n    (data as any)[key] = undefined;\n  });\n\n  const headers = new Headers();\n  headers.append('Content-Type', 'application/json');\n\n  if (token) {\n    headers.append('Authorization', `JWT ${token}`);\n  }\n\n  const response = await fetch(url, {\n    headers,\n    method,\n    body: method !== 'GET' ? JSON.stringify(data) : undefined,\n  });\n\n  try {\n    return { result: await response.json(), status: response.status };\n  } catch (e) {\n    return { result: e, status: response.status };\n  }\n}\n","import { call, ForkEffect, put, takeEvery, select } from 'redux-saga/effects';\nimport { combineReducers } from 'redux';\nimport {\n  Action,\n  ActionCreator,\n  Success,\n  actionCreatorFactory,\n} from 'typescript-fsa';\nimport {\n  ReducerBuilder,\n  reducerWithInitialState,\n} from 'typescript-fsa-reducers';\nimport { produce } from 'immer';\n\nimport { SOCKET_URL } from 'settings';\n\nimport { API, apiCaller, CreateModuleOptions } from 'services';\n\nimport {\n  PING_INTERVAL,\n  PONG_TIMEOUT,\n  PING,\n  PONG,\n  SOCKET_STATES,\n  SOCKET_OPENED,\n} from './constants';\n\nexport default class StateManager {\n  readonly sockets: {\n    [key: string]: {\n      socket: WebSocket;\n      uri: string;\n      token: string;\n    };\n  };\n  readonly timeouts: {\n    [key: string]: NodeJS.Timeout;\n  };\n  private pingInterval: NodeJS.Timeout | null;\n  readonly logging: boolean;\n\n  private handleMessage: (...args: unknown[]) => void;\n  private handleOpen: (...args: unknown[]) => void;\n  private handleClose: (...args: unknown[]) => void;\n  private handleReconnect: (...args: unknown[]) => void;\n\n  readonly socketEvents: {\n    // module\n    [key: string]: {\n      reducer: ReducerBuilder<any>;\n      events: {\n        [key: string]: ActionCreator<any>;\n      };\n    };\n  };\n  private sagaEffects: ForkEffect[] = [];\n\n  constructor() {\n    this.sockets = {};\n    this.timeouts = {};\n    this.pingInterval = null;\n    this.logging = true;\n\n    // Callbacks\n    this.handleMessage = a => console.log(a);\n    this.handleOpen = a => console.log(a);\n    this.handleClose = a => console.log(a);\n    this.handleReconnect = a => console.log(a);\n\n    this.socketEvents = {};\n  }\n\n  private _ping = (socketDesc: string) => {\n    this.sockets[socketDesc].socket.send(PING);\n\n    this.timeouts[socketDesc] = setTimeout(() => {\n      this.sockets[socketDesc].socket.close(4008, 'ping_timeout');\n    }, PONG_TIMEOUT);\n  };\n\n  private _onPong = (socketDesc: string) => {\n    clearTimeout(this.timeouts[socketDesc]);\n  };\n\n  private _listen = (socketDesc: string) => {\n    const { socket } = this.sockets[socketDesc];\n\n    socket.onopen = event => {\n      this.pingInterval = setInterval(\n        () => this._ping(socketDesc),\n        PING_INTERVAL\n      );\n      this._log(event, socketDesc);\n      this.handleOpen(socketDesc);\n    };\n\n    socket.onclose = event => {\n      clearInterval(this.pingInterval as NodeJS.Timeout);\n      console.log(this.sockets);\n      // attempt to reconnect if socket connection is dropped\n\n      if (!event.wasClean) {\n        const { token, uri } = this.sockets[socketDesc];\n        setTimeout(() => this.connectToSocket(socketDesc, token, uri), 10000);\n      }\n\n      this.handleClose(socketDesc, event.wasClean);\n      this._log(event, socketDesc);\n    };\n\n    socket.onmessage = event => {\n      const message = event.data;\n      if (message === PONG) this._onPong(socketDesc);\n      else {\n        this.handleMessage(socketDesc, JSON.parse(event.data));\n        this._log(event, socketDesc);\n      }\n    };\n  };\n\n  private _log = (event: any, socketDesc: string) => {\n    this.logging &&\n      console.log({\n        event,\n        state: this.getState(socketDesc),\n        socketObj: this.sockets,\n      });\n  };\n\n  public getState = (socketDesc: string) =>\n    SOCKET_STATES[this.sockets[socketDesc].socket.readyState];\n\n  public connectToSocket = (socketDesc: string, token: string, uri: string) => {\n    if (\n      this.sockets[socketDesc] &&\n      SOCKET_STATES[this.sockets[socketDesc].socket.readyState] ===\n        SOCKET_OPENED\n    )\n      return;\n\n    const socket = new WebSocket(`${SOCKET_URL}${uri}?token=${token}`);\n\n    this.sockets[socketDesc] = { token, uri, socket };\n    this._listen(socketDesc);\n  };\n\n  public disconnectFromSocket = (socketDesc: string) => {\n    console.log(this.sockets);\n    this.sockets[socketDesc].socket.close();\n  };\n\n  public onOpen = (func: any) => {\n    this.handleOpen = func;\n  };\n\n  public onReconnect = (func: any) => {\n    this.handleReconnect = func;\n  };\n\n  public onMessage = (func: any) => {\n    this.handleMessage = func;\n  };\n\n  public onClose = (func: any) => {\n    this.handleClose = func;\n  };\n\n  // this is used to define different reducers for different apis\n  public createModule(\n    name: string,\n    { initialState, single }: CreateModuleOptions = {}\n  ) {\n    if (!initialState) {\n      initialState = single ? { item: {} } : { items: [] };\n      initialState = { ...initialState, waiting: false };\n    }\n\n    this.socketEvents[name] = {\n      reducer: reducerWithInitialState(initialState),\n      events: {},\n    };\n  }\n\n  public createLocalEvent<Payload, ApiState>(\n    module: string,\n    actionName: string,\n    reducerFn: (state: ApiState, payload: Payload) => void\n  ) {\n    const action = actionCreatorFactory(module)<Payload>(actionName);\n\n    const { reducer } = this.socketEvents[module];\n\n    reducer.case(action, (state, payload) =>\n      produce(state, (draft: any) => {\n        reducerFn(draft, payload);\n      })\n    );\n\n    return action;\n  }\n\n  public createApi<Payload, Result, ApiState>(\n    module: string,\n    actionName: string,\n    api: API<Payload, Result, ApiState>\n  ): (payload: Payload) => Action<Payload> {\n    const asyncAction = actionCreatorFactory(module).async<\n      Payload,\n      Result,\n      Error\n    >(actionName);\n\n    this.sagaEffects.push(\n      // when this action is dispatched\n      takeEvery(asyncAction.started, function* (action: Action<Payload>) {\n        try {\n          // fetch auth\n          const token = yield select(state => state.auth.item.token);\n          const session_id = yield select(\n            state => state.session.item?.session?.id\n          );\n          // call api\n          const { result, status } = yield call(() =>\n            apiCaller<Payload>({\n              endpoint: module,\n              ...api,\n              data: action.payload,\n              token,\n              session_id,\n            })\n          );\n\n          if (status.toString()[0] !== '2') {\n            console.log(result);\n            return yield put(\n              asyncAction.failed({ params: action.payload, error: result })\n            );\n          }\n\n          yield put(asyncAction.done({ params: action.payload, result }));\n        } catch (error) {\n          console.log(error);\n          yield put(asyncAction.failed({ params: action.payload, error }));\n        }\n      })\n    );\n\n    const { reducer } = this.socketEvents[module];\n\n    reducer.case(asyncAction.started, (state, payload) =>\n      produce(state, (draft: any) => {\n        draft.waiting = true;\n        draft.error = undefined;\n        if (api.startReducer) api.startReducer(draft, payload);\n      })\n    );\n\n    reducer.case(asyncAction.failed, (state, { params, error }) =>\n      produce(state, (draft: any) => {\n        draft.waiting = false;\n        draft.error = error;\n        if (api.failReducer) api.failReducer(draft, error, params as Payload);\n      })\n    );\n\n    reducer.case(asyncAction.done, (state, { params, result }) =>\n      produce(state, (draft: any) => {\n        draft.waiting = false;\n        api.successReducer(draft, result as Result, params as Payload);\n      })\n    );\n\n    return (payload: Payload) => asyncAction.started(payload);\n  }\n\n  public createSocketListener<Payload, Result, ApiState>(\n    module: string,\n    event: string,\n    onReceive: (state: ApiState, result: Result) => void\n  ) {\n    const action = actionCreatorFactory(module)<Success<Payload, Result>>(\n      event\n    );\n    const { reducer } = this.socketEvents[module];\n\n    this.socketEvents[module].events[event] = action;\n\n    reducer.case(action, (state, payload: any) =>\n      produce(state, (draft: any) => {\n        onReceive(draft, payload as Result);\n      })\n    );\n  }\n\n  get events() {\n    return this.socketEvents;\n  }\n\n  get reducer() {\n    const reducers: {\n      [key: string]: ReducerBuilder<any>;\n    } = {};\n\n    Object.entries(this.socketEvents).forEach(([key, val]) => {\n      reducers[key] = val.reducer;\n    });\n\n    return combineReducers(reducers);\n  }\n\n  get saga() {\n    const self = this;\n    return function* () {\n      for (const effect of self.sagaEffects) {\n        yield effect;\n      }\n    };\n  }\n}\n"],"sourceRoot":""}