{"version":3,"sources":["services/index.ts","settings/index.ts","services/useInterval.ts","services/State/index.ts","services/State/ApiCaller.ts","services/State/StateManager.ts","services/State/createSocketMiddleware.ts","services/State/constants.ts","state/history.ts","views/Test/index.tsx","App.tsx","serviceWorker.ts","state/modules/root/index.ts","state/store.ts","index.tsx"],"names":["API_URL","SOCKET_URL","apiCaller","a","path","method","data","token","session_id","endpoint","query","queryString","stringify","url","endsWith","split","filter","s","forEach","param","key","slice","replace","undefined","headers","Headers","append","fetch","body","JSON","response","json","status","result","StateManager","sockets","timeouts","pingInterval","logging","handleMessage","handleOpen","handleClose","handleReconnect","socketEvents","sagaEffects","_ping","socketDesc","socket","send","PING","setTimeout","close","PONG_TIMEOUT","_onPong","clearTimeout","_listen","onopen","event","setInterval","PING_INTERVAL","_log","onclose","clearInterval","console","log","wasClean","uri","connectToSocket","onmessage","PONG","parse","state","getState","socketObj","SOCKET_STATES","readyState","SOCKET_OPENED","WebSocket","disconnectFromSocket","onOpen","func","onReconnect","onMessage","onClose","this","name","initialState","single","item","items","waiting","reducer","reducerWithInitialState","events","module","actionName","reducerFn","action","actionCreatorFactory","case","payload","produce","draft","api","asyncAction","async","push","takeEvery","started","select","auth","session","id","call","toString","put","failed","params","error","done","startReducer","failReducer","successReducer","onReceive","reducers","Object","entries","val","combineReducers","self","effect","f","createSocketMiddleware","stateManager","store","next","res","meta","SOCKET_COMMAND","type","SOCKET_CONNECT","dispatch","SOCKET_CONNECTED","SOCKET_CLOSED","message","SOCKET_RECEIVE","SOCKET_RECONNECT","SOCKET_DISCONNECT","hasOwnProperty","warn","SOCKET_RECONNECTED","0","1","2","3","history","createBrowserHistory","location","qs","search","substr","listen","go","goBack","Test","App","defer","htmlAttributes","lang","encodeSpecialCharacters","defaultTitle","titleTemplate","titleAttributes","itemprop","defaultProps","Boolean","window","hostname","match","sagaMiddleware","createSagaMiddleware","enhancers","compose","applyMiddleware","devToolsEnhancer","createStore","run","saga","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.0655844e.chunk.js","sourcesContent":["export { default as useInterval } from './useInterval';\nexport * from './State';\n","let BASE_URL = '';\nlet API_URL = '';\nlet SOCKET_URL = '';\n\nif (process.env.NODE_ENV === 'development') {\n  BASE_URL = '';\n}\n\nAPI_URL = `http://${BASE_URL}/api`;\nSOCKET_URL = `ws://${BASE_URL}/api`;\n\nexport { BASE_URL, API_URL, SOCKET_URL };\n","import React, { useEffect, useRef } from 'react';\n\ntype IntervalFunction = () => unknown | void;\n\nexport default function useInterval(callback: IntervalFunction, ms: number) {\n  const savedCallback = useRef<IntervalFunction | null>(null);\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      if (savedCallback.current !== null) {\n        savedCallback.current();\n      }\n    }\n\n    const id = setInterval(tick, ms);\n    return () => clearInterval(id);\n  }, [ms]);\n}\n","export * from './ApiCaller';\nexport { default as StateManager } from './StateManager';\nexport * from './createSocketActions';\nexport { default as createSocketMiddleware } from './createSocketMiddleware';\nexport * from './types';\n","import queryString from 'query-string';\nimport { select } from 'redux-saga/effects';\n\nimport { API_URL } from 'settings';\n\ntype apiParams<Payload> = {\n  path: string;\n  endpoint: string;\n  method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';\n  data?: Payload;\n  token?: string;\n  session_id?: string;\n};\n\nexport async function apiCaller<Payload>({\n  path,\n  method = 'GET',\n  data,\n  token,\n  session_id,\n  endpoint,\n}: apiParams<Payload>): Promise<any> {\n  // session_id is required for the session specific requests\n  if (session_id) data = { ...data, session_id: session_id } as any;\n\n  const query = '?' + queryString.stringify((data as any) || {});\n\n  let url = `${API_URL}/${endpoint}${path}`;\n  if (!url.endsWith('/')) url += '/';\n\n  if (method === 'GET') url += query;\n\n  const urlParams = path.split('/').filter(s => s[0] === ':');\n\n  urlParams.forEach(param => {\n    const key = param.slice(1);\n    url = url.replace(param, (data as any)[key]);\n    (data as any)[key] = undefined;\n  });\n\n  const headers = new Headers();\n  headers.append('Content-Type', 'application/json');\n\n  if (token) {\n    headers.append('Authorization', `JWT ${token}`);\n  }\n\n  const response = await fetch(url, {\n    headers,\n    method,\n    body: method !== 'GET' ? JSON.stringify(data) : undefined,\n  });\n\n  try {\n    return { result: await response.json(), status: response.status };\n  } catch (e) {\n    return { result: e, status: response.status };\n  }\n}\n","import { call, ForkEffect, put, takeEvery, select } from 'redux-saga/effects';\nimport { combineReducers } from 'redux';\nimport {\n  Action,\n  ActionCreator,\n  Success,\n  actionCreatorFactory,\n} from 'typescript-fsa';\nimport {\n  ReducerBuilder,\n  reducerWithInitialState,\n} from 'typescript-fsa-reducers';\nimport { produce } from 'immer';\n\nimport { SOCKET_URL } from 'settings';\n\nimport { API, apiCaller, CreateModuleOptions } from 'services';\n\nimport {\n  PING_INTERVAL,\n  PONG_TIMEOUT,\n  PING,\n  PONG,\n  SOCKET_STATES,\n  SOCKET_OPENED,\n} from './constants';\n\nexport default class StateManager {\n  readonly sockets: {\n    [key: string]: {\n      socket: WebSocket;\n      uri: string;\n      token: string;\n    };\n  };\n  readonly timeouts: {\n    [key: string]: NodeJS.Timeout;\n  };\n  private pingInterval: NodeJS.Timeout | null;\n  readonly logging: boolean;\n\n  private handleMessage: (...args: unknown[]) => void;\n  private handleOpen: (...args: unknown[]) => void;\n  private handleClose: (...args: unknown[]) => void;\n  private handleReconnect: (...args: unknown[]) => void;\n\n  readonly socketEvents: {\n    // module\n    [key: string]: {\n      reducer: ReducerBuilder<any>;\n      events: {\n        [key: string]: ActionCreator<any>;\n      };\n    };\n  };\n  private sagaEffects: ForkEffect[] = [];\n\n  constructor() {\n    this.sockets = {};\n    this.timeouts = {};\n    this.pingInterval = null;\n    this.logging = true;\n\n    // Callbacks\n    this.handleMessage = a => console.log(a);\n    this.handleOpen = a => console.log(a);\n    this.handleClose = a => console.log(a);\n    this.handleReconnect = a => console.log(a);\n\n    this.socketEvents = {};\n  }\n\n  private _ping = (socketDesc: string) => {\n    this.sockets[socketDesc].socket.send(PING);\n\n    this.timeouts[socketDesc] = setTimeout(() => {\n      this.sockets[socketDesc].socket.close(4008, 'ping_timeout');\n    }, PONG_TIMEOUT);\n  };\n\n  private _onPong = (socketDesc: string) => {\n    clearTimeout(this.timeouts[socketDesc]);\n  };\n\n  private _listen = (socketDesc: string) => {\n    const { socket } = this.sockets[socketDesc];\n\n    socket.onopen = event => {\n      this.pingInterval = setInterval(\n        () => this._ping(socketDesc),\n        PING_INTERVAL\n      );\n      this._log(event, socketDesc);\n      this.handleOpen(socketDesc);\n    };\n\n    socket.onclose = event => {\n      clearInterval(this.pingInterval as NodeJS.Timeout);\n      console.log(this.sockets);\n      // attempt to reconnect if socket connection is dropped\n\n      if (!event.wasClean) {\n        const { token, uri } = this.sockets[socketDesc];\n        setTimeout(() => this.connectToSocket(socketDesc, token, uri), 10000);\n      }\n\n      this.handleClose(socketDesc, event.wasClean);\n      this._log(event, socketDesc);\n    };\n\n    socket.onmessage = event => {\n      const message = event.data;\n      if (message === PONG) this._onPong(socketDesc);\n      else {\n        this.handleMessage(socketDesc, JSON.parse(event.data));\n        this._log(event, socketDesc);\n      }\n    };\n  };\n\n  private _log = (event: any, socketDesc: string) => {\n    this.logging &&\n      console.log({\n        event,\n        state: this.getState(socketDesc),\n        socketObj: this.sockets,\n      });\n  };\n\n  public getState = (socketDesc: string) =>\n    SOCKET_STATES[this.sockets[socketDesc].socket.readyState];\n\n  public connectToSocket = (socketDesc: string, token: string, uri: string) => {\n    if (\n      this.sockets[socketDesc] &&\n      SOCKET_STATES[this.sockets[socketDesc].socket.readyState] ===\n        SOCKET_OPENED\n    )\n      return;\n\n    const socket = new WebSocket(`${SOCKET_URL}${uri}?token=${token}`);\n\n    this.sockets[socketDesc] = { token, uri, socket };\n    this._listen(socketDesc);\n  };\n\n  public disconnectFromSocket = (socketDesc: string) => {\n    console.log(this.sockets);\n    this.sockets[socketDesc].socket.close();\n  };\n\n  public onOpen = (func: any) => {\n    this.handleOpen = func;\n  };\n\n  public onReconnect = (func: any) => {\n    this.handleReconnect = func;\n  };\n\n  public onMessage = (func: any) => {\n    this.handleMessage = func;\n  };\n\n  public onClose = (func: any) => {\n    this.handleClose = func;\n  };\n\n  // this is used to define different reducers for different apis\n  public createModule(\n    name: string,\n    { initialState, single }: CreateModuleOptions = {}\n  ) {\n    if (!initialState) {\n      initialState = single ? { item: {} } : { items: [] };\n      initialState = { ...initialState, waiting: false };\n    }\n\n    this.socketEvents[name] = {\n      reducer: reducerWithInitialState(initialState),\n      events: {},\n    };\n  }\n\n  public createLocalEvent<Payload, ApiState>(\n    module: string,\n    actionName: string,\n    reducerFn: (state: ApiState, payload: Payload) => void\n  ) {\n    const action = actionCreatorFactory(module)<Payload>(actionName);\n\n    const { reducer } = this.socketEvents[module];\n\n    reducer.case(action, (state, payload) =>\n      produce(state, (draft: any) => {\n        reducerFn(draft, payload);\n      })\n    );\n\n    return action;\n  }\n\n  public createApi<Payload, Result, ApiState>(\n    module: string,\n    actionName: string,\n    api: API<Payload, Result, ApiState>\n  ): (payload: Payload) => Action<Payload> {\n    const asyncAction = actionCreatorFactory(module).async<\n      Payload,\n      Result,\n      Error\n    >(actionName);\n\n    this.sagaEffects.push(\n      // when this action is dispatched\n      takeEvery(asyncAction.started, function* (action: Action<Payload>) {\n        try {\n          // fetch auth\n          const token = yield select(state => state.auth.item.token);\n          const session_id = yield select(\n            state => state.session.item?.session?.id\n          );\n          // call api\n          const { result, status } = yield call(() =>\n            apiCaller<Payload>({\n              endpoint: module,\n              ...api,\n              data: action.payload,\n              token,\n              session_id,\n            })\n          );\n\n          if (status.toString()[0] !== '2') {\n            console.log(result);\n            return yield put(\n              asyncAction.failed({ params: action.payload, error: result })\n            );\n          }\n\n          yield put(asyncAction.done({ params: action.payload, result }));\n        } catch (error) {\n          console.log(error);\n          yield put(asyncAction.failed({ params: action.payload, error }));\n        }\n      })\n    );\n\n    const { reducer } = this.socketEvents[module];\n\n    reducer.case(asyncAction.started, (state, payload) =>\n      produce(state, (draft: any) => {\n        draft.waiting = true;\n        draft.error = undefined;\n        if (api.startReducer) api.startReducer(draft, payload);\n      })\n    );\n\n    reducer.case(asyncAction.failed, (state, { params, error }) =>\n      produce(state, (draft: any) => {\n        draft.waiting = false;\n        draft.error = error;\n        if (api.failReducer) api.failReducer(draft, error, params as Payload);\n      })\n    );\n\n    reducer.case(asyncAction.done, (state, { params, result }) =>\n      produce(state, (draft: any) => {\n        draft.waiting = false;\n        api.successReducer(draft, result as Result, params as Payload);\n      })\n    );\n\n    return (payload: Payload) => asyncAction.started(payload);\n  }\n\n  public createSocketListener<Payload, Result, ApiState>(\n    module: string,\n    event: string,\n    onReceive: (state: ApiState, result: Result) => void\n  ) {\n    const action = actionCreatorFactory(module)<Success<Payload, Result>>(\n      event\n    );\n    const { reducer } = this.socketEvents[module];\n\n    this.socketEvents[module].events[event] = action;\n\n    reducer.case(action, (state, payload: any) =>\n      produce(state, (draft: any) => {\n        onReceive(draft, payload as Result);\n      })\n    );\n  }\n\n  get events() {\n    return this.socketEvents;\n  }\n\n  get reducer() {\n    const reducers: {\n      [key: string]: ReducerBuilder<any>;\n    } = {};\n\n    Object.entries(this.socketEvents).forEach(([key, val]) => {\n      reducers[key] = val.reducer;\n    });\n\n    return combineReducers(reducers);\n  }\n\n  get saga() {\n    const self = this;\n    return function* () {\n      for (const effect of self.sagaEffects) {\n        yield effect;\n      }\n    };\n  }\n}\n","import {\n  SOCKET_CONNECT,\n  SOCKET_CONNECTED,\n  SOCKET_DISCONNECT,\n  SOCKET_COMMAND,\n  SOCKET_RECEIVE,\n  SOCKET_CLOSED,\n  SOCKET_RECONNECT,\n  SOCKET_RECONNECTED,\n} from './constants';\n\nimport { SocketAction, StateManager } from 'services';\n\nexport default function createSocketMiddleware(stateManager: StateManager) {\n  return (store: any) => (next: any) => (action: SocketAction) => {\n    let res;\n    let module, event;\n    if (!(action.meta === SOCKET_COMMAND)) {\n      return next(action);\n    } else {\n      res = next(action);\n      switch (action.type) {\n        case SOCKET_CONNECT:\n          stateManager.onOpen((socketDesc: string) => {\n            store.dispatch({\n              type: SOCKET_CONNECTED,\n              meta: SOCKET_COMMAND,\n              socketDesc: socketDesc,\n            });\n          });\n          stateManager.onClose((socketDesc: string, wasClean: boolean) => {\n            console.log('closing ', socketDesc, wasClean);\n            store.dispatch({\n              type: SOCKET_CLOSED,\n              meta: SOCKET_COMMAND,\n              socketDesc: socketDesc,\n              wasClean: wasClean,\n            });\n          });\n          stateManager.onMessage((socketDesc: string, message: string) => {\n            store.dispatch({\n              type: SOCKET_RECEIVE,\n              payload: message,\n              meta: SOCKET_COMMAND,\n              socketDesc: socketDesc,\n            });\n          });\n          stateManager.onReconnect((socketDesc: string) => {\n            store.dispatch({\n              type: SOCKET_RECONNECT,\n              meta: SOCKET_COMMAND,\n              socketDesc: socketDesc,\n            });\n          });\n          stateManager.connectToSocket(\n            action.socketDesc,\n            action.token,\n            action.uri\n          );\n          break;\n        case SOCKET_DISCONNECT:\n          console.log('disconecting ');\n          stateManager.disconnectFromSocket(action.socketDesc);\n          break;\n        case SOCKET_RECEIVE:\n          [module, event] = action.payload['type'].split('.');\n          if (\n            stateManager.events.hasOwnProperty(module) &&\n            stateManager.events[module].events.hasOwnProperty(event)\n          ) {\n            store.dispatch(\n              stateManager.events[module].events[event](action.payload['data'])\n            );\n          } else {\n            console.warn({ module, event }, 'does not exist');\n          }\n          break;\n        case SOCKET_RECONNECT:\n          store.dispatch({\n            type: SOCKET_RECONNECTED,\n            meta: SOCKET_COMMAND,\n            socketDesc: action.socketDesc,\n          });\n      }\n    }\n    return res;\n  };\n}\n","export const PING_INTERVAL = 10000;\nexport const PONG_TIMEOUT = 5000;\nexport const PING = 'PING';\nexport const PONG = 'PONG';\n\n// SOCKET_STATES\nexport const SOCKET_CONNECTING = 'SOCKET_CONNECTING';\nexport const SOCKET_OPENED = 'SOCKET_OPENED';\nexport const SOCKET_CLOSING = 'SOCKET_CLOSING';\nexport const SOCKET_CLOSED = 'SOCKET_CLOSED';\n\nexport const SOCKET_STATES: { [key: string]: string } = {\n  0: SOCKET_CONNECTING,\n  1: SOCKET_OPENED,\n  2: SOCKET_CLOSING,\n  3: SOCKET_CLOSED,\n};\n\n// ACTIONS\nexport const SOCKET_COMMAND = 'SOCKET_COMMAND';\nexport const SOCKET_RECEIVE = 'SOCKET_RECEIVE';\nexport const SOCKET_RECONNECTED = 'SOCKET_RECONNECTED';\nexport const SOCKET_RECONNECT = 'SOCKET_RECONNECT';\n\nexport const SOCKET_CONNECT = 'SOCKET_CONNECT';\nexport const SOCKET_CONNECTED = 'SOCKET_CONNECTED';\nexport const SOCKET_DISCONNECT = 'SOCKET_DISCONNECT';\n","import { createBrowserHistory } from 'history';\nimport qs from 'qs';\n\nconst history = createBrowserHistory();\n\nhistory.location = {\n  ...history.location,\n  query: qs.parse(history.location.search.substr(1)),\n  state: {},\n};\n\nhistory.listen(() => {\n  history.location = {\n    ...history.location,\n    query: qs.parse(history.location.search.substr(1)),\n    state: history.location.state || {},\n  };\n});\n\nconst { go, goBack, push, replace } = history;\n\nexport { go, goBack, push, replace };\nexport default history;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst Test: React.FC = () => {\n  return <div>Test! It fucking works!</div>;\n};\n\nexport default Test;\n","import React from 'react';\nimport { Router, Switch, Route, Redirect } from 'react-router-dom';\n\nimport { Helmet } from 'react-helmet-async';\n\nimport history from './state/history';\n\nimport { Test } from './views';\n\nconst App: React.FC = () => {\n  return (\n    <Router history={history}>\n      <Helmet\n        defer={false}\n        htmlAttributes={{ lang: 'en' }}\n        encodeSpecialCharacters={true}\n        defaultTitle={'Minesweeper'}\n        titleTemplate={`%s | PM`}\n        titleAttributes={{ itemprop: 'name', lang: 'en' }}\n      />\n      <Test />\n    </Router>\n  );\n};\n\nApp.defaultProps = {};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL || '',\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { StateManager } from 'services';\n\nimport { Board } from 'state';\n\nexport const stateManager = new StateManager();\n\nexport type StoreState = {\n  board: Board;\n};\n","import { createStore, compose, applyMiddleware, StoreEnhancer } from 'redux';\nimport { devToolsEnhancer } from 'redux-devtools-extension/logOnlyInProduction';\nimport createSagaMiddleware from 'redux-saga';\n\nimport { stateManager, StoreState } from './modules/root/';\n\nimport { createSocketMiddleware } from 'services';\n\n/**\n * Create the redux-saga middleware.\n */\nconst sagaMiddleware = createSagaMiddleware();\n\n/**\n * Enhancers for the store.\n */\nconst enhancers = compose(\n  /* Add the redux-saga middleware */\n  applyMiddleware(createSocketMiddleware(stateManager)),\n  applyMiddleware(sagaMiddleware),\n  /* Include the devtools. Comment this out if you don't want to use the dev tools. */\n  devToolsEnhancer({})\n) as StoreEnhancer<StoreState>;\n\n/**\n * Create the store. We do not include an initial state, as each of the module / duck\n * reducers includes its own initial state.\n */\nconst store = createStore(stateManager.reducer, enhancers);\n\n/* Run the root saga */\nsagaMiddleware.run(stateManager.saga);\n\nexport function getStore() {\n  return store;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport { HelmetProvider } from 'react-helmet-async';\n\nimport 'antd/dist/antd.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { getStore } from './state/store';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <Provider store={getStore()}>\n    <HelmetProvider>\n      <App />\n    </HelmetProvider>\n  </Provider>,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}